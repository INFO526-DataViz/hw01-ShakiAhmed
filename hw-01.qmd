---
title: "HW 01"
author: "Shakir Ahmed"
format: 
  html:
    embed-resources: true

toc: true
---

Setup of Library functions and installing packages needed for homework

```{r setup,include=FALSE, warning = FALSE, message=FALSE}
# Install & load packages
#Accidents dataset is within dsbox package


if (!require("pacman"))
  install.packages("pacman")
pacman::p_load("tidyverse")
pacman::p_load_gh("rstudio-education/dsbox")


theme_set(theme_minimal(base_size = 11))

### setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# setting width of code output
options(width = 65)

# setting figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 4,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 500             # higher dpi, sharper image
)

```

## 1 - Road traffic accidents in Edinburgh

Below code chunk is to create a new day type vector to assign each day as weekday or weekend.

```{r 1_day_type,warning = FALSE, message=FALSE}
# Create a vector of weekdays and weekends
day_type_vector <- c(
  Monday = "Weekday", Tuesday = "Weekday", Wednesday = "Weekday", Thursday = "Weekday", Friday = "Weekday",
  Saturday = "Weekend", Sunday = "Weekend"
)
```

Now that we have created a new vector, we need to identify the type of day, and then process the data to add a new column for **'day_type'**.

```{r 1_processing,warning = FALSE, message=FALSE}
# Function to identify the day type
type <- function(day_of_week) 
{
  return(ifelse(day_of_week %in% names(day_type_vector), day_type_vector[day_of_week], "NA"))
}

# Process the data and add a new column for day_type
accidents$day_type <- sapply(accidents$day_of_week, type)

```

Visualization of the processed data with the required alpha to create a translucent plot. Facet wrap is used to split into two plots (2 row,1 col)

```{r 1_plot,warning = FALSE, message=FALSE}

# Create a ggplot visualization with density of 0.3
ggplot(data = accidents, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.3) +
  facet_wrap(~ day_type, ncol = 1) +  #To plot the weekdays and weekends in one plot
  labs(
    x        = "Time of the day",
    y        = "Density",
    title    = "Number of accidents throughout the day",
    subtitle = "By day of week and severity",
  )
```

**Observation**- The accident count is more concentrated from 12PM to 10PM (particularly data peaks at 4:00PM during weekdays and weekends). Slight accidents are more than serious or fatal accidents. There are no fatal accidents during the weekend.

## 2 - NYC marathon winners

The New York City Marathon is an annual marathon (26.2 miles / 42.195 kilometers) that courses through the five boroughs of New York City. Marathon times of runners in the Men and Women divisions of the New York City Marathon between 1970 and 2020 can be found in the nyc_marathon dataset in the openintro package.

a\. Create a histogram and a box plot of the distribution of marathon times of all runners in the dataset. What features of the distribution are apparent in the histogram and not the box plot? What features are apparent in the box plot but not in the histogram?

```{r 2_all_runners,warning = FALSE, message=FALSE}

library(openintro)
library(ggplot2)

#Plotting histogram for all runners (male and female together)
ggplot(nyc_marathon, aes(x = time)) +
  geom_histogram() +
  labs(title = "Histogram of NYC Marathon Times for all runners", 
       x = "Time (mins)", 
       y = "Number of Runners"
       )+
theme_minimal()

#Plotting boxplot for all runners (male and female together)
ggplot(nyc_marathon, aes(x = time)) +
geom_boxplot() +
  labs(title = "Histogram of NYC Marathon Times", 
       x = "Time (mins)", 
       y = "Number of Runners"
  )+
  theme_minimal()

```

**Observation**- The boxplot effectively shows the outliers and the median value.

b\. Create a side-by-side box plots of marathon times for men and women. Use different colors for the each of the box plots -- do not use the default colors, but instead manually define them (you can choose any two colors you want). Based on the plots you made, compare the distribution of marathon times for men and women.

```{r 2_men_n_women,warning = FALSE, message=FALSE}

# Create a boxplot with different colors for male and female
ggplot(data = nyc_marathon, aes(x = time, y = division, fill = division)) +
  geom_boxplot() +
  scale_fill_manual(values = c("deepskyblue", "orange")) +                          #Manual color scaling function to custom set colors
  labs(
    title = "Marathon Times by Division",
    x = "Marathon Time (hours)",
    y = "Division"
  ) +
  theme_minimal()
```

**Observation**- The finishing time is faster for male than female with median vaues also showing the same.

c\. Creating a plot to avoid the redundancy from the above plot:-

```{r 2_redo_men_women,warning = FALSE, message=FALSE}

  ggplot(data=nyc_marathon, aes(x = time, y = division, fill = division)) +
  geom_boxplot(show.legend = FALSE) +
  scale_fill_manual(values = c("deepskyblue2", "orange")) +
  labs(x = "year",
       y = "time(min)",
       title = "Marathon times over the years by gender") + 
  theme_bw()
```

**Rationale**: The legend parameter is redundant as the Y Axis clearly labels the runners are Men and Women. A legend is not needed to differentiate between runners. This was the redundancy in the previous graph.

d\. Visualize the marathon times of men and women over the years. As is usual with time series plot, year should go on the x-axis. Use different colors and shapes to represent the times for men and women. Make sure your colors match those in the previous part. Once you have your plot, describe what is visible in this plot but not in the others.

```{r 2_nyc_time_series,warning = FALSE, message=FALSE}

#Time series plot to show how the running time has changed between men and women
ggplot(data = nyc_marathon, aes(x = year, y = time, color = division)) +
  geom_point() +
  #Manual scaling of colors
  scale_color_manual(values = c("Men" = "deepskyblue2", "Women" = "orange")) +  
  #Labling of figure
  labs(
    title = "Marathon Times Over the Years",
    x = "Year",
    y = "Marathon Time\n(in hours)",
    color = "Division"
  ) +
  theme_minimal()
```

**Observation-** The average finishing time for men and women are reducing over the years

## 3 - US counties

a\. What does the following code do? Does it work? Does it make sense? Why/why not?

```{r 3_q1,warning = FALSE, message=FALSE}
#Plot is an example of how a dotplot will not be helpful in representation
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))
```

**Answer-** The above data makes no sense as it does not show distribution of the data for educational qualifications.

b\. Which of the following two plots makes it easier to compare poverty levels (poverty) across people from different median education levels (median_edu)? What does this say about when to place a faceting variable across rows or columns?

```{r 3_q2,warning = FALSE, message=FALSE}
#Plot 1 showing the spread of data is across the X axis
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)

#Plot 1 showing the spread of data is across the Y axis
ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)

```

**Answer-** The first plot of the data makes more sense as it shows the spread more distinctly (values) across the home ownership vs educational qualifications.

c\. Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it'sÂ `metro`.

```{r 3_plots_A_B, warning = FALSE, message=FALSE}

# Scatter plot shows the full data set
ggplot(data = county, aes(x = homeownership, y = poverty)) +
  geom_point() +
  labs(title = "Plot A",
       x = "homeownership",
       y = "poverty")

# Scatter plot shows the full data set and geom_smooth plot layered over
ggplot(data = county, aes(x = homeownership, y = poverty)) +
  geom_point() +
  geom_smooth(se = FALSE)+
  labs(title = "Plot B",
       x = "homeownership",
       y = "poverty")

```

```{r 3_plots_C_D, warning = FALSE, message=FALSE}

# Scatter plot with smoothing line for metro categorical variable (color set to green) layered over the scatter plot
ggplot(data = county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_point() +  
  geom_smooth(se = FALSE, aes(color = "green")) +  # Set color as a constant ("green")
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot C"
  )

# Scatter plot with smoothing line for metro categorical variable (color set to green) layered under the scatter plot
ggplot(data = county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_smooth(se = FALSE) + 
  geom_point() +  # Add points on top of the smoothed line
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot D"
  )
```

```{r 3_plots_E_F, warning = FALSE, message=FALSE}

#Scatter plot shows the segregation of data points based on metro variable, and smoothing line set to different linetypes, with legends
ggplot(data = county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_point(aes(color = metro)) +
  geom_smooth(aes(linetype = metro),se = FALSE) + 
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot E"
  ) +
  scale_linetype_manual(values = c("yes" = 21, "no" = "solid")) 

#Scatter plot shows the segregation of data points based on metro variable, and smoothing line matching the color of data set, layered under the data set, with legends
ggplot(data = county, aes(x = homeownership, y = poverty, group = metro)) +
  geom_smooth(aes(color = metro),se = FALSE) +
  geom_point(aes(color = metro)) +
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot F"
  )
```

```{r 3_plots_G_H, warning = FALSE, message=FALSE}

#Scatter plot shows the segregation of data points based on metro variable, and smoothing line set for the whole data without segregation
ggplot(data = county, aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  geom_smooth(se = FALSE)+
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot G"
  )

#Scatter plot shows the segregation of data points based on metro variable only
ggplot(data = county, aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  labs(
    x = "homeownership",
    y = "poverty",
    title = "Plot H"
  )
```

## 4 - Rental apartments in SF

The data for this exercise comes from TidyTuesday and it's on rental prices in San Francisco. You can find out more about the dataset by inspecting its documentationÂ [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-07-05). The dataset you'll be using is calledÂ `rent`. Create a visualization that will help you compare the distribution of rental prices (`price`) per bedroom (`beds`) across neighborhoods (`nhood`) in the city of San Francisco (`city == "san francisco"`), over time. Limit your analysis to rentals where the full unit is available, i.e. (`room_in_apt == 0`). You have the flexibility to choose which years and which neighborhoods. Note that you should have a maximum of 8 neighborhoods on your visualization, but one or more of them can be a combination of many (e.g., an "other" category). Your visualization should also display some measure of the variability in your data. You get to decide what type of visualization to create and there is more than one correct answer! In your answer, include a brief description of why you made the choices you made as well as an interpretation of the findings of how rental prices vary over time and neighborhoods in San Francisco.

This code snippet retrieves rental data from a GitHub repository using R's "read.csv()" function. The dataset, part of the TidyTuesday project, will be the foundation for data analysis and visualization task, enabling insights into rental prices and patterns for the city of San Francisco.

```{r 4_read,warning = FALSE, message=FALSE}

# Read the data from the URL in Github
rent <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv")
```

```{r 4_process,warning = FALSE, message=FALSE}
# Create a new column for price per bedroom (Using mutate function)
mutate_data <- rent %>%
  mutate(price_per_bedroom = price / beds)  # Assigning value of new column to a division of price/beds

# Selecting 6 neighborhoods
neighborhoods <- c("bayview", "parkside", "CCSF", "russian hill", "sea cliff", "twin peaks")
filtered_data <- mutate_data %>%
  filter(nhood %in% neighborhoods)  # Filter based on the selected neighborhoods

# Filter the data for years 2010-2018
filtered_data <- filtered_data %>%
  filter(city == "san francisco", room_in_apt == 0, year >= 2010, year <= 2018)

```

Now, we have the required filtered data. We can proceed with plotting the graph. I am choosing a heatmap plot to show the data, as the goal is to display the varying of rent per bedroom as time passes, and the heatmap can accomplish this goal by showing color gradients for each neighborhood.

```{r 4_plot,warning = FALSE, message=FALSE}

#Heatmap for prices for 6 different neighborhoods from year 2010-2018
ggplot(data = filtered_data, aes(x = year, y = nhood, fill = price_per_bedroom)) +
  geom_tile() +
  labs(
    x = "Year",
    y = "Neighborhood",
    fill = "Price per Bedroom",
    title = "Heatmap of Price per Bedroom Trends (2010-2018)"
  ) +
  theme_minimal() +
  scale_fill_gradient(low = "white", high = "blue")  # Adjust the color scale

```

**Observation**- For the above data, the general trend is upwards, i.e. price is increasing as time passes. For some neighborhoods there is a steep increase, and then correction, but overall trend is upwards (positive).

## 5 - Napoleon's march.

The instructions for this exercise are simple: recreate the Napoleon's march plot by Charles John Minard in ggplot2. The data is provided as a list, saved as `napoleon.rds`. Read it in using `read_rds()`. This object has three elements: `cities`, `temperatures`, and `troops`. Each of these is a data frame, and the three of them combined contain all of the data you need to recreate the visualization. Your goal isn't to create an exact replica of the original plot, but to get as close to it as you can using code you understand and can describe articulately in your response. I'll be the first to say that if you google "Napoleon's march in ggplot2", you'll find a bunch of blog posts, tutorials, etc. that walk you through how to recreate this visualization with ggplot2. So you might be thinking, "why am I being asked to copy something off the internet for my homework?" Well, this is an exercise in (1) working with web resources and citing them properly, (2) understanding someone else's ggplot2 code and reproducing their work, (3) describing what that code does in your own words, and finally (4) putting some final touches to make the final product your own. Some more guidelines below:

-   You should make sure your response properly cites all of the resources you use. I'm defining "use" to include "browse, read, get inspired by, or directly borrow snippets of code from". You don't need to worry about formal citations, it's okay to make a list with links to your resources and provide a brief summary of how you used each one.

-   For this exercise, you're asked to describe what your code does (instead of interpreting the visualization, since we already did that in class). If you write the code, it should be straightforward for you to describe it. If you borrow any code from outside resources, you need to understand what that code does, and describe it, ***in your own words***. (This is important, you're allowed to use found code, but you are not allowed to copy someone's blog post or tutorial as your description of their code.)

-   Finally, you should personalize the visualization with your own touch. You can do this in a myriad of ways, e.g., change colors, annotations, labels, etc. This change should be made to make the plot more like the original in some way. You need to explicitly call out what change you made and why you made it.

    Importing/reading the code using the rds() function after setting file path to 'data' folder

    ```{r 5_read,warning = FALSE, message=FALSE}

    #Setting directory to data folder, where napoleon.rds data exists
    setwd("/cloud/project/data")
    troops <- readRDS("napoleon.rds")
    ```

    Now

    ```{r 5_process_plot,warning = FALSE, message=FALSE}

    library(ggplot2)
    library(scales)     # additional formatting for scales
    library(grid)       # combining plots
    library(gridExtra)  # combining plots
    library(dplyr)      # tidy data manipulations
    install.packages("HistData")



    #Troop data
    data(Minard.troops, package="HistData")
    str(Minard.troops)
    #Cities Data
    data(Minard.cities, package="HistData")
    str(Minard.cities)
    #Temperature data
    data(Minard.temp, package="HistData")
    str(Minard.temp)

    #Below plot is for plotting the latitude and longitude the troops travelled
    #Width is set as the number of survivors to show the strength of the army
    #Knitr function is used to scale the graph
     breaks <- c(1, 2, 3) * 10^5 #New vector setis defined
    ggplot(Minard.troops, aes(long, lat)) +
            geom_path(aes(size = survivors, colour = direction, group = group),
                      lineend="round") +
        scale_size("Survivors", range = c(1,10), #c(0.5, 15),
                   breaks=breaks, labels=scales::comma(breaks)) +
        scale_color_manual("Direction", 
                           values = c("cornsilk3", "black"), 
                           labels=c("Advance", "Retreat")) 

    #ggplot trick to assign it to a variable to use later
    plot_troops <- last_plot()


    #Cities are now appended on top of the above plot
    plot_troops + geom_text(data = Minard.cities, aes(label = city), size = 3)

    #Package ggrepel is used to automatically move the labels away from points and to ensure none of the labels overlap
    if (!require(ggrepel)) {install.packages("ggrepel"); require(ggrepel)}
    library(ggrepel)
    plot_troops +   
        geom_point(data = Minard.cities) +
        geom_text_repel(data = Minard.cities, aes(label = city))

    #ggplot trick to assign it to a variable to use later
    plot_troops_cities <- last_plot()

    #Plotting the temperature with custom size
    ggplot(Minard.temp, aes(long, temp)) +
        geom_path(color="grey", size=1.5) +
        geom_point(size=2)

    #Below code is to standardize the temperature format by combining temperature and date
    Minard.temp <- Minard.temp %>%
        mutate(label = paste0(temp, "Â° ", date))
    head(Minard.temp$label)

    #These plots are pushing the right most two points outside the graph. Using geom_text_repel to bring back the data
    ggplot(Minard.temp, aes(long, temp)) +
        geom_path(color="grey", size=1.5) +
        geom_point(size=1) +
      geom_text_repel(aes(label=label), size=2.5)

    #ggplot trick to assign it to a variable to use later
    plot_temp <- last_plot()


    #Now, we have to assemble the two graphs one below the other
    grid.arrange(plot_troops_cities, plot_temp)

    #In troops and cities plot, we have to set X axis limits to a range that will coincide with those for the plot of temperature
    #Remove X and Y axis labels scales
    #Remove legends for survivors and directions
    plot_troops_cities +
      coord_cartesian(xlim = c(24, 38)) +
      labs(x = "Longitude", y = "Latitude",title="Minard's version of Napoleon's March") +
      guides(color = FALSE, size = FALSE)

    #ggplot trick to assign it to a variable to use later
    plot_troops_cities_fixed <- last_plot() 

    #Setting theme for temperature graph
    plot_temp + 
      coord_cartesian(xlim = c(24, 38)) +
      labs(x="Napoleon's March Duration", y="Temperature",caption = "Michael Friendly (2018), Minard meets ggplot2") + 
      theme_bw() +
      theme(panel.grid.major.x = element_blank(),
            panel.grid.minor.x = element_blank(),
            panel.grid.minor.y = element_blank(),
            axis.text.x = element_blank(), axis.ticks = element_blank(),
            panel.border = element_blank())

    #ggplot trick to assign it to a variable to use later
    plot_temp_fixed <- last_plot()

    #Function to combine both the plots into one single plot and add a border
    grid.arrange(plot_troops_cities_fixed, plot_temp_fixed, nrow=2, heights=c(3.5, 1.2))
    grid.rect(width = .99, height = .99, gp = gpar(lwd = 2, col = "gray", fill = NA))
    ```
